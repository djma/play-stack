/*
 * This file is generated by jOOQ.
 */
package djma.db.jooq.tables.records;


import djma.db.jooq.tables.Contact;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactRecord extends UpdatableRecordImpl<ContactRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.contact.resourceName</code>.
     */
    public void setResourcename(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.contact.resourceName</code>.
     */
    public String getResourcename() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.contact.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.contact.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.contact.email</code>.
     */
    public void setEmail(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.contact.email</code>.
     */
    public String getEmail() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.contact.phone</code>.
     */
    public void setPhone(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.contact.phone</code>.
     */
    public String getPhone() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Contact.CONTACT.RESOURCENAME;
    }

    @Override
    public Field<String> field2() {
        return Contact.CONTACT.NAME;
    }

    @Override
    public Field<String> field3() {
        return Contact.CONTACT.EMAIL;
    }

    @Override
    public Field<String> field4() {
        return Contact.CONTACT.PHONE;
    }

    @Override
    public String component1() {
        return getResourcename();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getEmail();
    }

    @Override
    public String component4() {
        return getPhone();
    }

    @Override
    public String value1() {
        return getResourcename();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getEmail();
    }

    @Override
    public String value4() {
        return getPhone();
    }

    @Override
    public ContactRecord value1(String value) {
        setResourcename(value);
        return this;
    }

    @Override
    public ContactRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ContactRecord value3(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public ContactRecord value4(String value) {
        setPhone(value);
        return this;
    }

    @Override
    public ContactRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContactRecord
     */
    public ContactRecord() {
        super(Contact.CONTACT);
    }

    /**
     * Create a detached, initialised ContactRecord
     */
    public ContactRecord(String resourcename, String name, String email, String phone) {
        super(Contact.CONTACT);

        setResourcename(resourcename);
        setName(name);
        setEmail(email);
        setPhone(phone);
    }
}
