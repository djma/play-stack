/*
 * This file is generated by jOOQ.
 */
package djma.db.generated.tables;


import djma.db.generated.Keys;
import djma.db.generated.Public;
import djma.db.generated.tables.records.KvstoreRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kvstore extends TableImpl<KvstoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kvstore</code>
     */
    public static final Kvstore KVSTORE = new Kvstore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KvstoreRecord> getRecordType() {
        return KvstoreRecord.class;
    }

    /**
     * The column <code>public.kvstore.key</code>.
     */
    public final TableField<KvstoreRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.kvstore.value</code>.
     */
    public final TableField<KvstoreRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.kvstore.lastModified</code>.
     */
    public final TableField<KvstoreRecord, LocalDateTime> LASTMODIFIED = createField(DSL.name("lastModified"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Kvstore(Name alias, Table<KvstoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kvstore(Name alias, Table<KvstoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kvstore</code> table reference
     */
    public Kvstore(String alias) {
        this(DSL.name(alias), KVSTORE);
    }

    /**
     * Create an aliased <code>public.kvstore</code> table reference
     */
    public Kvstore(Name alias) {
        this(alias, KVSTORE);
    }

    /**
     * Create a <code>public.kvstore</code> table reference
     */
    public Kvstore() {
        this(DSL.name("kvstore"), null);
    }

    public <O extends Record> Kvstore(Table<O> child, ForeignKey<O, KvstoreRecord> key) {
        super(child, key, KVSTORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<KvstoreRecord> getPrimaryKey() {
        return Keys.KVSTORE_PKEY;
    }

    @Override
    public Kvstore as(String alias) {
        return new Kvstore(DSL.name(alias), this);
    }

    @Override
    public Kvstore as(Name alias) {
        return new Kvstore(alias, this);
    }

    @Override
    public Kvstore as(Table<?> alias) {
        return new Kvstore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kvstore rename(String name) {
        return new Kvstore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kvstore rename(Name name) {
        return new Kvstore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kvstore rename(Table<?> name) {
        return new Kvstore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
